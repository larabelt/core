<?php namespace Tests\Belt\Core\Feature\Api;

use Belt\Core\Tests;
use Belt\Core\Param;
use Belt\Core\Translation;
use Belt\Core\Facades\TranslateFacade as Translate;

class ApiTranslatablesTest extends Tests\BeltTestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Param::unguard();
    }

    public function mockMiddleware()
    {
        Translate::shouldReceive('isEnabled')->andReturn(true);
        Translate::shouldReceive('isAvailableLocale')->andReturn(true);
        Translate::shouldReceive('canTranslateObjects')->andReturn(true);
        Translate::shouldReceive('getAlternateLocale')->andReturn('es_ES');
        Translate::shouldReceive('getLocaleFromRequest')->andReturn(null);
    }

    public function test()
    {
        $this->enableI18n();
        $this->refreshDB();
        $this->actAsSuper();

        # store
        $response = $this->json('POST', '/api/v1/params/1/translations', [
            'locale' => 'es_ES',
            'translatable_column' => 'value',
            'value' => 'translated',
        ]);

        $response->assertStatus(201);
        $translationID = array_get($response->json(), 'id');

        # index
        $response = $this->json('GET', '/api/v1/params/1/translations');
        $response->assertStatus(200);

        # show
        $response = $this->json('GET', "/api/v1/params/2/translations/$translationID");
        $response->assertStatus(404);
        $response = $this->json('GET', "/api/v1/params/1/translations/$translationID");
        $response->assertStatus(200);
        $response = $this->json('GET', "/api/v1/params/1/translations/value");
        $response->assertStatus(200);

        # update
        $this->json('PUT', "/api/v1/params/1/translations/$translationID", [
            'value' => 'updated'
        ]);
        $response = $this->json('GET', "/api/v1/params/1/translations/$translationID");
        $response->assertJson(['value' => 'updated']);

        # delete
        $response = $this->json('DELETE', "/api/v1/params/1/translations/$translationID");
        $response->assertStatus(204);
        $response = $this->json('GET', "/api/v1/params/1/translations/$translationID");
        $response->assertStatus(404);
    }

    public function testAutoTranslateStore()
    {
        $this->enableI18n();
        $this->refreshDB();
        $this->actAsSuper();

        $this->mockMiddleware();

        $param = Param::find(1);
        $param->update(['value' => 'original']);

        # store (auto-translated)
        Translate::shouldReceive('translate')->with('original', 'es_ES')->andReturn('auto-translated-store');
        $response = $this->json('POST', '/api/v1/params/1/translations', [
            'locale' => 'es_ES',
            'translatable_column' => 'value',
            '_auto_translate' => true,
        ]);
        $response->assertStatus(201);
        $translationID = array_get($response->json(), 'id');

        $response = $this->json('GET', "/api/v1/params/1/translations/$translationID");
        $response->assertJson(['value' => 'auto-translated-store']);
    }

    public function testAutoTranslateUpdate()
    {
        $this->enableI18n();
        $this->refreshDB();
        $this->actAsSuper();

        $this->mockMiddleware();

        $param = Param::find(1);
        $param->update(['value' => 'original']);
        $translation = $param->saveTranslation('value', '', 'es_ES');

        # update (auto-translated)
        Translate::shouldReceive('translate')->once()->with('original', 'es_ES')->andReturn('auto-translated-update');
        $this->json('PUT', "/api/v1/params/1/translations/$translation->id", [
            '_auto_translate' => true,
        ]);
        $response = $this->json('GET', "/api/v1/params/1/translations/$translation->id");
        $response->assertJson(['value' => 'auto-translated-update']);
    }

}